# -*- coding: utf-8 -*-

"""
mdnotesccg

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import base64
import calendar
from datetime import datetime

from mdnotesccg.controllers.o_auth_authorization_controller import\
    OAuthAuthorizationController


class OAuth2:

    @staticmethod
    def apply(config, http_request):
        """ Add OAuth2 authentication to the request.

        Args:
            config (Configuration): The Configuration object which holds the
                authentication information.
            http_request (HttpRequest): The HttpRequest object to which
                authentication header will be added.

        """
        token = config.o_auth_token.access_token
        http_request.headers['Authorization'] = "Bearer {}".format(token)

    @staticmethod
    def update_token(token):
        """ Sets the expiry field of the OAuth token

        Args:
            token (OAuthToken): The OAuth token.

        """
        if hasattr(token, 'expires_in'):
            utc_now = calendar.timegm(datetime.now().utctimetuple())
            token.expiry = (utc_now + int(token.expires_in))

    @staticmethod
    def build_basic_auth_header(config):
        """ Builds the basic auth header for endpoints in the
            OAuth Authorization Controller.

        Args:
            config (Configuration): The Configuration object which holds the
                authentication information.

        Returns:
            str: The value of the Authentication header.

        """
        username = config.o_auth_client_id
        password = config.o_auth_client_secret
        joined = "{}:{}".format(username, password)
        encoded = base64.b64encode(str.encode(joined)).decode('iso-8859-1')
        return "Basic {}".format(encoded)

    @staticmethod
    def check_auth(config):
        """ Checks if OAuth token is valid.

        Args:
            config (Configuration): The Configuration object which holds the
                authentication information.
        """
        if not config.o_auth_token:
            config._o_auth_token = OAuth2.authorize(config)
        if OAuth2.token_expired(config.o_auth_token):
            config._o_auth_token = OAuth2.authorize(config)

    @staticmethod
    def authorize(config, scope=None, additional_params=None):
        """ Authorizes the client.

        Args:
            config (Configuration): The Configuration object which holds the
                authentication information.
            scope (str | list of str): The scope required for the access token.
            additional_params (dict):  Any additional form parameters.

        Returns:
            OAuthToken: The OAuth token.

        """
        token = OAuthAuthorizationController(config).request_token(
            OAuth2.build_basic_auth_header(config),
            ' '.join(scope) if (isinstance(scope, list)) else scope,
            additional_params
        )
        OAuth2.update_token(token)
        return token

    @staticmethod
    def token_expired(token):
        """ Checks if OAuth token has expired.

        Returns:
            bool: True if token has expired, False otherwise.

        """
        utc_now = calendar.timegm(datetime.now().utctimetuple())
        return (hasattr(token, 'expiry') and token.expiry is not None and
                token.expiry < utc_now)
